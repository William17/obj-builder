{"version":3,"file":"gateschema.min.js","sources":["../esm/index.js"],"sourcesContent":["var Builder = (function () {\n    function Builder(defaultObject) {\n        if (typeof defaultObject === 'function') {\n            defaultObject = defaultObject();\n        }\n        this.targetObj = defaultObject || {};\n    }\n    Builder.prototype.from = function (source) {\n        this.source = source;\n        return this;\n    };\n    Builder.prototype.pick = function (fieldList) {\n        var isArray = this.isArray;\n        var _a = this, targetObj = _a.targetObj, source = _a.source;\n        fieldList.forEach(function (field) {\n            var key;\n            var defaultValue;\n            if (isArray(field)) {\n                key = field[0];\n                defaultValue = field[1];\n            }\n            else {\n                key = field;\n            }\n            var val = source[key];\n            targetObj[key] = val === undefined ? defaultValue : val;\n        });\n        return this;\n    };\n    Builder.prototype.map = function (fieldObject) {\n        var isArray = this.isArray;\n        var _a = this, targetObj = _a.targetObj, source = _a.source;\n        Object.keys(fieldObject).forEach(function (field) {\n            var key;\n            var defaultValue;\n            var originField = fieldObject[field];\n            if (isArray(originField)) {\n                key = originField[0];\n                defaultValue = originField[1];\n            }\n            else {\n                key = originField;\n            }\n            var val = source[key];\n            targetObj[field] = val === undefined ? defaultValue : val;\n        });\n        return this;\n    };\n    Builder.prototype.compute = function (field, fn) {\n        var _this = this;\n        if (typeof field === 'object') {\n            Object.keys(field).forEach(function (key) {\n                _this.compute(key, field[key]);\n            });\n        }\n        else {\n            if (typeof fn === 'function') {\n                this.computeOne(field, fn);\n            }\n            else {\n                throw new Error('this second argument of compute should be a function');\n            }\n        }\n        return this;\n    };\n    Builder.prototype.computeOne = function (field, fn) {\n        var _a = this, targetObj = _a.targetObj, source = _a.source;\n        targetObj[field] = fn(source);\n        return this;\n    };\n    Builder.prototype.assign = function (fn) {\n        Object.assign(this.targetObj, fn(this.source));\n        return this;\n    };\n    Builder.prototype.custom = function (fn) {\n        fn(this.targetObj, this.source);\n        return this;\n    };\n    Builder.prototype.pickIf = function () {\n        return this.callIf('pick', arguments);\n    };\n    Builder.prototype.mapIf = function () {\n        return this.callIf('map', arguments);\n    };\n    Builder.prototype.computeIf = function () {\n        return this.callIf('compute', arguments);\n    };\n    Builder.prototype.assignIf = function () {\n        return this.callIf('assign', arguments);\n    };\n    Builder.prototype.customIf = function () {\n        return this.callIf('custom', arguments);\n    };\n    Builder.prototype.val = function () {\n        return this.targetObj;\n    };\n    Builder.prototype.isTrueVal = function (val) {\n        if (typeof val === 'function') {\n            return val(this.source);\n        }\n        return val;\n    };\n    Builder.prototype.isArray = function (val) {\n        return Array.isArray(val);\n    };\n    Builder.prototype.callIf = function (method, args) {\n        if (this.isTrueVal(args[0])) {\n            return this[method].apply(this, [].slice.call(arguments, 1));\n        }\n        return this;\n    };\n    return Builder;\n}());\nexport default function build(defaultObject) {\n    return new Builder(defaultObject);\n}\n//# sourceMappingURL=index.js.map"],"names":["Builder","prototype","from","source","this","pick","fieldList","isArray","targetObj","forEach","field","key","defaultValue","val","undefined","map","fieldObject","keys","originField","compute","fn","_this","Error","computeOne","assign","custom","pickIf","callIf","arguments","mapIf","computeIf","assignIf","customIf","isTrueVal","Array","method","args","apply","slice","call","defaultObject"],"mappings":"iMAAA,IAAIA,KAOQC,UAAUC,KAAO,SAAUC,eAC1BA,OAASA,EACPC,QAEHH,UAAUI,KAAO,SAAUC,OAC3BC,EAAUH,KAAKG,QACJC,EAANJ,KAAqBI,UAAWL,EAAhCC,KAA4CD,gBAC3CM,QAAQ,SAAUC,OACpBC,EACAC,EACAL,EAAQG,MACFA,EAAM,KACGA,EAAM,MAGfA,MAENG,EAAMV,EAAOQ,KACPA,QAAeG,IAARD,EAAoBD,EAAeC,IAEjDT,QAEHH,UAAUc,IAAM,SAAUC,OAC1BT,EAAUH,KAAKG,QACJC,EAANJ,KAAqBI,UAAWL,EAAhCC,KAA4CD,qBAC9Cc,KAAKD,GAAaP,QAAQ,SAAUC,OACnCC,EACAC,EACAM,EAAcF,EAAYN,GAC1BH,EAAQW,MACFA,EAAY,KACHA,EAAY,MAGrBA,MAENL,EAAMV,EAAOQ,KACPD,QAAiBI,IAARD,EAAoBD,EAAeC,IAEnDT,QAEHH,UAAUkB,QAAU,SAAUT,EAAOU,OACrCC,EAAQjB,QACS,iBAAVM,SACAO,KAAKP,GAAOD,QAAQ,SAAUE,KAC3BQ,QAAQR,EAAKD,EAAMC,UAG5B,IACiB,mBAAPS,QAID,IAAIE,MAAM,6DAHXC,WAAWb,EAAOU,UAMxBhB,QAEHH,UAAUsB,WAAa,SAAUb,EAAOU,OAC7BZ,EAANJ,KAAqBI,UAAWL,EAAhCC,KAA4CD,gBAC3CO,GAASU,EAAGjB,GACfC,QAEHH,UAAUuB,OAAS,SAAUJ,iBAC1BI,OAAOpB,KAAKI,UAAWY,EAAGhB,KAAKD,SAC/BC,QAEHH,UAAUwB,OAAS,SAAUL,YAC9BhB,KAAKI,UAAWJ,KAAKD,QACjBC,QAEHH,UAAUyB,OAAS,kBAChBtB,KAAKuB,OAAO,OAAQC,cAEvB3B,UAAU4B,MAAQ,kBACfzB,KAAKuB,OAAO,MAAOC,cAEtB3B,UAAU6B,UAAY,kBACnB1B,KAAKuB,OAAO,UAAWC,cAE1B3B,UAAU8B,SAAW,kBAClB3B,KAAKuB,OAAO,SAAUC,cAEzB3B,UAAU+B,SAAW,kBAClB5B,KAAKuB,OAAO,SAAUC,cAEzB3B,UAAUY,IAAM,kBACbT,KAAKI,aAERP,UAAUgC,UAAY,SAAUpB,SACjB,mBAARA,EACAA,EAAIT,KAAKD,QAEbU,KAEHZ,UAAUM,QAAU,SAAUM,UAC3BqB,MAAM3B,QAAQM,MAEjBZ,UAAU0B,OAAS,SAAUQ,EAAQC,UACrChC,KAAK6B,UAAUG,EAAK,IACbhC,KAAK+B,GAAQE,MAAMjC,KAAM,GAAGkC,MAAMC,KAAKX,UAAW,IAEtDxB,MAEJJ,YA9GEA,EAAQwC,GACgB,mBAAlBA,MACSA,UAEfhC,UAAYgC,GAAiB,aA4G3B,SAAeA,UACnB,IAAIxC,EAAQwC"}